#+title: Plugins and Remaps
#+auto_tangle: t

* CONTENTS :toc:
- [[#general-config][General Config]]
- [[#keybindings][KeyBindings]]
- [[#plugins][Plugins]]

* General Config
#+begin_src lua :tangle base.lua
vim.cmd('autocmd!')

vim.g.mapleader = ' '
vim.g.netrw_banner=0
vim.g.netrw_altv=1
vim.g.netrw_liststyle=0

vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.autoindent = true
vim.opt.ignorecase = true
vim.opt.smartindent = true
vim.opt.hlsearch = false
vim.opt.incsearch = true

vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.o.expandtab = 4
vim.opt.shiftwidth = 4

vim.opt.swapfile = false
vim.opt.undodir = os.getenv("HOME") .. "/.vi/undodir"
vim.opt.undofile = true
vim.opt.path:append{'**'}

vim.opt.guicursor = ""
vim.opt.termguicolors = true
vim.opt.cursorline = false
vim.opt.updatetime = 50
vim.opt.scrolloff = 8
vim.wo.wrap = false
vim.opt.signcolumn = "yes"

vim.cmd('au TextYankPost * silent! lua vim.highlight.on_yank() {timeout=10}')
#+end_src

* KeyBindings
#+begin_src lua :tangle remap.lua
local opts = {silent = true}

--Increment/Decrement
--keymap.set('n', '+', '<C-a>')
--keymap.set('n', '-', '<C-x>')

--Finding file
vim.keymap.set('n', '<leader>f', ':find ')

--Snippets
vim.keymap.set('n', ',htm', ':-1read $HOME/.vi/snippets/.skeleton.htm<CR> 6jvit')
vim.keymap.set('n', ',cpp', ':-1read $HOME/.vi/snippets/.skeleton.cpp<CR> 5jO')

--Delete word backward
--keymap.set('n', 'dw', 'vb"_d')

--Select all
--keymap.set('n', '<C-a>', 'gg<S-v>G', opts)

--Pasting without copying
vim.keymap.set("x", "<leader>p", [["_dP]])

--Do not yank with "x"
vim.keymap.set("n", "x", '"_x')

--Do not yank with "s"
vim.keymap.set("n", "s", '"_s')

vim.keymap.set("n", "J", "mzJ`z")

--Moving highlighted block
vim.keymap.set('v', "J", ":m '>+1<CR>gv=gv")
vim.keymap.set('v', "K", ":m '<-2<CR>gv=gv")

--Buffer
vim.keymap.set('n', '<leader>bk', ':bw<Return>', opts)
--keymap.set("n", "<leader>bp", ":bprevious<Return>",{silent = true} )
--keymap.set("n", "<leader>bi", ":ls<Return>", {silent = true})
--
vim.keymap.set('n', '<leader>vv', ':Ex<Return>', opts)

--Split
vim.keymap.set('n', '<leader>ss', ':split<Return><C-w>w', opts)
vim.keymap.set('n', '<leader>sv', ':vsplit<Return><C-w>w', opts)

--Navigation
vim.keymap.set('n', '<leader>h', '<C-w>h')
vim.keymap.set('n', '<leader>j', '<C-w>j')
vim.keymap.set('n', '<leader>k', '<C-w>k')
vim.keymap.set('n', '<leader>l', '<C-w>l')

vim.keymap.set('n', '<C-d>', '<C-d>zz')
vim.keymap.set('n', '<C-u>', '<C-u>zz')

vim.keymap.set("n", "<leader>s", [[:%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]])
#+end_src

* Plugins
#+begin_src lua :tangle plugins.lua
local status_ok , packer = pcall(require, "packer")
if not status_ok then
	return
end

packer.init {
    display = {
        open_fn = function ()
        	return require("packer.util").float { border = "rounded" }
        end,
    },
}

require('packer').startup(function(use)
    use { 'wbthomason/packer.nvim' }

    use { 'jiangmiao/auto-pairs',
        opt = true,
        event = 'BufWinEnter'
    }

    use { 'nvim-lua/popup.nvim' }

    use { 'nvim-telescope/telescope.nvim',
        requires = { 'nvim-lua/plenary.nvim' },
    }

    use { 'lifepillar/vim-gruvbox8',
        opt = true,

    }

    use { 'norcalli/nvim-colorizer.lua',
        opt = true,
        event = 'BufWinEnter'
    }

    use { 'nvim-treesitter/nvim-treesitter', }

    use { 'VonHeikemen/lsp-zero.nvim',
        requires = {
            { 'neovim/nvim-lspconfig' },
            { 'williamboman/mason.nvim' },
            { 'williamboman/mason-lspconfig.nvim' },
            { 'hrsh7th/nvim-cmp' },
            { 'hrsh7th/cmp-buffer', after = 'nvim-cmp' },
            { 'hrsh7th/cmp-path', after  = 'nvim-cmp' },
            { 'saadparwaiz1/cmp_luasnip', after  = 'nvim-cmp' },
            { 'hrsh7th/cmp-nvim-lsp', after  = 'nvim-cmp' },
            { 'hrsh7th/cmp-nvim-lua', after  = 'nvim-cmp' },
            { 'L3MON4D3/LuaSnip' },
            { 'rafamadriz/friendly-snippets' },
        },
    }
end)
#+end_src
