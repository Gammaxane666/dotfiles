#+title: XMonad Window Manager (XMobar) config
#+property: header-args :tangle xmonad.hs

* Contents :toc:
- [[#imports][Imports]]
- [[#focus-with-mouse][Focus With Mouse]]
- [[#border-size-and-color][Border Size and Color]]
- [[#mod-key][Mod Key]]
- [[#workspaces][Workspaces]]
- [[#scratchpads][ScratchPads]]
- [[#keybindings][Keybindings]]
- [[#layouts][Layouts]]
- [[#window-rules][Window Rules]]
- [[#eventhook][EventHook]]
- [[#loghook][LogHook]]
- [[#startup-applications][Startup Applications]]
- [[#starting-xmonad-and-other-stuff-main][Starting XMonad and Other Stuff (Main)]]
- [[#defaults][Defaults]]

* Imports
#+begin_src haskell
import XMonad
import Data.Monoid
import System.Exit

import XMonad.Util.SpawnOnce
import XMonad.Util.Run
import XMonad.Hooks.ManageDocks
import XMonad.Layout.Fullscreen
import Data.Maybe (fromJust)
import XMonad.Util.Cursor
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
import XMonad.Layout.Spacing
import XMonad.Util.EZConfig ( additionalKeysP )
import XMonad.Layout.NoBorders
import XMonad.Util.NamedScratchpad

import Colors.DoomOne

import qualified XMonad.StackSet as W
import qualified Data.Map as M
#+end_src

* Focus With Mouse
#+begin_src haskell
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = False

myClickJustFocuses :: Bool
myClickJustFocuses = True
#+end_src

* Border Size and Color
#+begin_src haskell
myBorderWidth   = 1

myFocusedBorderColor  = "#fe8019"
myNormalBorderColor   = "#1B1D1E"
#+end_src

* Mod Key
#+begin_src haskell
myModMask       = mod1Mask
#+end_src

* Workspaces
#+begin_src haskell
myWorkspaces = [" dev ", " www ", " sys ", " doc ", " mus ", " vid ", " gfx "]
myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)

clickable ws = "<action=xdotool key alt+"++show i++">"++ws++"</action>"
    where i = fromJust $ M.lookup ws myWorkspaceIndices
#+end_src

* ScratchPads
#+begin_src haskell
myTerminal :: String
myTerminal = "alacritty"

myScratchPads :: [NamedScratchpad]
myScratchPads = [ NS "cmus" spawnCmus findCmus manageCmus
                , NS "lf" spawnLf findLf manageLf
                , NS "vi" spawnVi findVi manageVi
                ]
  where
    spawnCmus  = myTerminal ++ " -t ncmpcpp -e ncmpcpp"
    findCmus   = title =? "ncmpcpp"
    manageCmus = customFloating $ W.RationalRect l t w h
               where
                 h = 0.7
                 w = 0.7
                 t = 0.15
                 l = 0.15

    spawnLf  = myTerminal ++ " -t lf -e lf"
    findLf   = title =? "lf"
    manageLf = customFloating $ W.RationalRect l t w h
               where
                 h = 0.9
                 w = 0.9
                 t = 0.95 -h
                 l = 0.95 -w

    spawnVi  = myTerminal ++ " -t vi -e vi -X"
    findVi   = title =? "vi"
    manageVi = customFloating $ W.RationalRect l t w h
               where
                 h = 0.95
                 w = 0.987
                 t = 0.04
                 l = 0.008
#+end_src

* Keybindings
#+begin_src haskell
myKeys = [
  ("M-<Return>", spawn(myTerminal))
 ,("M-e", namedScratchpadAction myScratchPads "lf")
 ,("M-p", namedScratchpadAction myScratchPads "cmus")
 ,("M-`", namedScratchpadAction myScratchPads "vi")
 ,("M-S-<Return>", windows W.swapMaster)
 ,("M-h", windows W.focusDown)

 ,("M-S-h", sendMessage Shrink)
 ,("M-S-t", sendMessage Expand)
 ]
#+end_src

* Layouts
#+begin_src haskell
myLayout = avoidStruts (tiled) ||| Full
  where
     tiled   = spacingWithEdge 5 $ Tall nmaster delta ratio
     nmaster = 1
     ratio   = 1/2
     delta   = 3/100
#+end_src

* Window Rules
#+begin_src haskell
myManageHook = composeAll
    [ className =? "MPlayer"        --> doFloat
    , className =? "Nm-applet"         --> doCenterFloat
    , className =? "Gimp"           --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore
    ]<+> namedScratchpadManageHook myScratchPads
#+end_src

* EventHook
#+begin_src haskell
myEventHook = mempty
#+end_src

* LogHook
#+begin_src haskell
myLogHook = return ()
#+end_src

* Startup Applications
#+begin_src haskell
myStartupHook = do
  setDefaultCursor xC_left_ptr
  spawn     " sxhkd -m -1 -c ~/.xmonad/sxhkd/sxhkdrc"
  spawnOnce "/usr/bin/emacs --daemon"
  spawnOnce "mpd"
  spawnOnce "~/.fehbg"
  spawnOnce "nm-applet"
  spawnOnce "volumeicon &"
  spawnOnce "trayer --edge top --tint 0x282c34 --align right --widthtype request --padding 6 --SetDockType true --SetPartialStrut true  --expand true --transparent true --alpha 0 --height 24"
#+end_src

* Starting XMonad and Other Stuff (Main)
#+begin_src haskell
main = do
    xmproc <- spawnPipe "xmobar ~/.config/xmobar/.xmobarrc"
    xmonad $ docks $ fullscreenSupport defaults {
        logHook = dynamicLogWithPP xmobarPP {
            ppOutput = hPutStrLn xmproc,
            ppCurrent = xmobarColor color06 "" ,
            --ppHidden = xmobarColor color05 "" . wrap ("<box type=Top width=2 mt=2 color=" ++ color05 ++ ">") "</box>",
            ppVisible = xmobarColor color06 "",
            ppHiddenNoWindows = xmobarColor color05 "",
            --ppTitle = xmobarColor color16 "" . shorten 20,
            --ppSep =  "<fc=" ++ color09 ++ "> <fn=1>|</fn> </fc>",
            ppOrder = \(ws:l:ex) -> [ws]
        }
    } `additionalKeysP` myKeys
#+end_src

* Defaults
#+begin_src haskell
defaults = def {
      -- simple stuff
        --terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        clickJustFocuses   = myClickJustFocuses,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        --keys               = myKeys,
        --mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
    }
#+end_src
